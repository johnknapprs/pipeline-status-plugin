
plugins {
    id 'java'
    id 'maven-publish'
    id 'org.jenkins-ci.jpi' version '0.33.0'
    // Publish to GitHub
    id "com.github.breadmoirai.github-release" version "2.2.9"
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.jenkins-ci.org/public/'
    }

    maven {
        url = 'http://repo.maven.apache.org/maven2'
    }
}

// group = 'org.jenkins-ci.plugins'
// version = '1.2.0-SNAPSHOT'
// description = 'A description of the plugin'

jenkinsPlugin {
    // version of Jenkins core this plugin depends on, must be 1.420 or later
    coreVersion = '2.85'

    shortName = 'pipeline-status-plugin'
    displayName = 'pipeline-status-plugin'
    fileExtension = 'hpi'

    url = 'http://wiki.jenkins-ci.org/display/JENKINS/SomePluginPage'
    gitHubUrl = 'https://github.com/liatrio/pipeline-status-plugin'
    pluginFirstClassLoader = true

    workDir = file('/tmp/jenkins')

    // optional list of package prefixes that your plugin doesn't want to see from core
    maskClasses = 'groovy.grape org.apache.commons.codec'
    // optional version number from which this plugin release is configuration-compatible
    compatibleSinceVersion = '1.1.0'


    // URL used to deploy the plugin, defaults to the value shown
    repoUrl = 'https://repo.jenkins-ci.org/releases'
    // URL used to deploy snapshots of the plugin, defaults to the value shown
    snapshotRepoUrl = 'https://repo.jenkins-ci.org/snapshots'

    disabledTestInjection = false
    localizerOutputDir = "${project.buildDir}/generated-src/localizer"

    configureRepositories = false
    configurePublishing = false


    // the developers section is optional, and corresponds to the POM developers section
    developers {
        developer {
            id 'liatrio'
            name 'TODO NAME'
            email 'TODO EMAIL'
        }
    }

    // licenses {
    //     license {
    //         name 'Apache License, Version 2.0'
    //         url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
    //         distribution 'repo'
    //         comments 'A business-friendly OSS license'
    //     }
    // }
}

dependencies {
    // For more info on jenkins Dependencies: https://github.com/jenkinsci/gradle-jpi-plugin
    jenkinsPlugins 'org.jenkinsci.plugins:pipeline-model-definition:1.3.9'
    jenkinsPlugins 'org.jenkins-ci.plugins:cobertura:1.12.1'
    jenkinsPlugins 'org.jenkins-ci.plugins:jacoco:2.2.1'
    jenkinsPlugins 'org.jenkins-ci.plugins:structs:1.20'
    jenkinsPlugins 'org.jenkins-ci.plugins:junit:1.8'
    jenkinsPlugins 'org.jenkins-ci.plugins:ssh-credentials:1.13'

    compile 'org.apache.httpcomponents:httpcore:4.4.12'
    compile 'org.ow2.asm:asm:5.0.3'
    compile 'org.ow2.asm:asm-tree:5.0.3'
    compile 'org.ow2.asm:asm-commons:5.0.3'
    compile 'org.apache.maven.reporting:maven-reporting-api:3.0'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'com.github.jnr:jffi:1.2.20' // , name: 'jffi', version: '1.2.20'

    testCompile 'org.mockito:mockito-all:2.0.2-beta'
    testCompile 'org.powermock:powermock-core:1.7.4'
    testCompile 'org.powermock:powermock-module-junit4:1.7.4'
    testCompile 'org.powermock:powermock-api-mockito:1.7.4'
    testCompile 'org.jenkins-ci.main:jenkins-war:2.164.1'
    testCompile 'org.jenkins-ci.main:jenkins-test-harness:2.55'
    testCompile 'org.jenkins-ci:test-annotations:1.3'
    testCompile 'junit:junit:4.12'
    testCompile 'org.slf4j:log4j-over-slf4j:1.7.25'
    testCompile 'org.slf4j:jcl-over-slf4j:1.7.25'
    testCompile 'org.slf4j:slf4j-jdk14:1.7.25'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.12'
    compileOnly 'net.jcip:jcip-annotations:1.0'
    compileOnly 'org.codehaus.mojo:animal-sniffer-annotations:1.17'
    compileOnly 'javax.servlet:javax.servlet-api:3.1.0'
    compileOnly 'org.jenkins-ci.main:jenkins-core:2.164.1'
    compileOnly 'org.kohsuke:access-modifier-annotation:1.16'
    compileOnly 'commons-logging:commons-logging:1.2'
}

group = 'io.jenkins.plugins'
version = '0.1.0'
description = 'Pipeline Status Plugin'
sourceCompatibility = '1.8'

configurations.all {
    exclude(group: 'javax.servlet', module: 'servlet-api')
    exclude(group: 'org.sonatype.sisu', module: 'sisu-guice')
    exclude(group: 'log4j', module: 'log4j')
    exclude(group: 'log4j', module: 'log4j')
    exclude(group: 'commons-logging', module: 'commons-logging')
    exclude(group: 'commons-logging', module: 'commons-logging')
    exclude(group: 'org.testng', module: 'testng')
}

task testsJar(type: Jar) {
    classifier = 'tests'
    from(sourceSets.test.output)
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
            artifact(testsJar)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

githubRelease {
    token '0070f23eb1f51c016c9649cf3bbb70ee551ed9f8'
    owner 'johnknapprs'
    repo 'pipeline-status-plugin'
    tagName "v${project.version}"
    targetCommitish 'master'
    releaseName "v${project.version}"
    body "" 
    draft false
    prerelease false
    // releaseAssets jar.destinationDir.listFiles // this points to which files you want to upload as assets with your release
    overwrite false // if true, will delete an existing release with the same tag and name
    apiEndpoint 'https://api.github.com'
}

// FilenameFilter filter = { dir, filename -> filename.contains(project.version) }
// releaseAssets= jar.destinationDir.listFiles filter

